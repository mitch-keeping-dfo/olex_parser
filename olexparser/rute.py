import re
import math

import gpxpy

from olexparser.rute_entry import RuteEntry


class Rute:
    """A class used to represent a Rute found in the :class:`RuterFile<olexparser.ruter_file.RuterFile>`

    :param rute: a string containing a Rute from the :class:`RuterFile<olexparser.ruter_file.RuterFile>`
    :type rute: str

    :var self.rute_entries: list of :class:`RuteEntry<olexparser.rute_entry.RuteEntry>` entries for the Rute
    :var self.plottsett: The Plottsett number of the Rute. The number identifies the "Layer" within the Olex program.
        Default value is -1 as all Plottsett values are positive.
    :var self.layer: The "Layer" the Rute is visible on within Olex. Derived from the Plottsett number.
    :var self.rute_type: The "Type" of Rute. e.g. 'Strek'
    :var self.rute_color: The Color used for the Rute. e.g. 'Rod' (Red)
    :var self.rute_name: The Name of the Rute
    :var self.notes_text: Any notes added to the Rute
    :var self.warnings: A list of warnings generated by the :class:`Rute<olexparser.rute.Rute>` class

    .. note::
        The plottsett value corresponds to the Layer name in Olex.

        The plottsett value is 2**N where N is the index of the layer name.

        For example, Layer "A" is at index 0 and Layer "A1" is index 10. The plottsett value for "A" would be 2**0 = 1.

        The plottsett value for "A1" would be 2**10 = 1024.
    .. note::
        The plottsett value of 65 seems to break the power of 2 relationship
        between the plottsett number and layer.
        Casting all numbers as :class:`int` seems to give the correct values and maintains the relationship.
        No special case for plottsett 65 (layer G) is required.

    .. todo:: check for more possible rute options

    """
    def __init__(self, rute):
        """A constructor method for the Rute class

        :param rute: a string containing a Rute from the Ruter file
        :type rute: str
        """

        self.rute_entries = []
        self.plottsett = -1  # all plottsett are a positive value
        self.layer = ""
        self.rute_type = ""
        self.rute_color = ""
        self.rute_name = ""
        self.notes_text = ""

        self.warnings = []

        self.parse_rute(rute)

    def parse_rute(self, rute):
        """
        Parses the Rute string.

        :param rute: A string containing the identified Rute from the
            :class:`RuterFile<olexparser.ruter_file.RuterFile>`
        :type rute: str
        """
        plot_layer_names = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
                            "A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1", "I1", "J1",
                            "A2", "B2", "C2", "D2", "E2", "F2", "G2", "H2", "I2", "J2",
                            "A3", "B3", "C3", "D3", "E3", "F3", "G3", "H3", "I3", "J3",
                            "A4", "B4", "C4", "D4", "E4", "F4", "G4", "H4", "I4", "J4",
                            "A5", "B5", "C5", "D5", "E5", "F5", "G5", "H5", "I5", "J5")

        # Rute Name; Rute type; Line Color; Plot Layer; Positions
        plot_layer_re = r'Plottsett (\d*)'  # Plottsett
        rute_type_re = r'Rutetype (.*)'  # Rutetype
        line_color_re = r'Linjefarge (.*)'  # Linjefarge
        rute_name_re = r'Rute (.*)'  # Rute name
        rute_entry_re = r'([-\d.]+) ([-\d.]+) (\d+) (.+)'  # Rute Data points
        layer_matches = re.findall(plot_layer_re, rute)
        if len(layer_matches) == 1:
            layer_number = int(layer_matches[0])
            self.plottsett = layer_number
            self.layer = plot_layer_names[int(math.log(layer_number, 2))]
        else:
            warn = "Warning, only 1 Layer should be present in a Rute"
            self.warnings.append(warn)

        type_matches = re.findall(rute_type_re, rute)
        if len(type_matches) == 1:
            self.rute_type = type_matches[0]
        else:
            warn = "Warning, only 1 Rute Type should be present in a Rute"
            self.warnings.append(warn)

        color_matches = re.findall(line_color_re, rute)
        if len(color_matches) == 1:
            self.rute_color = color_matches[0]
        else:
            warn = "Warning, only 1 Color Type should be present in a Rute"
            self.warnings.append(warn)

        name_matches = re.findall(rute_name_re, rute)
        if len(name_matches) == 1:
            self.rute_name = name_matches[0]
        else:
            warn = "Warning, only 1 Rute Name should be present in a Rute"
            self.warnings.append(warn)

        rute_entry_matches = re.findall(rute_entry_re, rute)
        for i in rute_entry_matches:
            self.rute_entries.append(RuteEntry(i[0], i[1], i[2], i[3]))

        # Hacky work around to find the notes, a proper RE would be preferred
        # Strips whitespace and checks if last line is a rute entry
        # If not it assumes it is a note
        notes = rute.split("\n")
        while "" in notes:
            notes.remove("")
        if re.match(rute_entry_re, notes[-1]) is None:
            self.notes_text = notes[-1]

        return

    def __str__(self):
        """A descriptive string representation of the Rute class
        :return: String representation of the Rute class
        :rtype: str
        """
        s = "\nRute Name: {}".format(self.rute_name)
        if self.rute_type != "":
            s = s + "\nRute Type: {}".format(self.rute_type)
        if self.rute_color != "":
            s = s + "\nLine Color: {}".format(self.rute_color)
        if self.layer != "":
            s = s + "\nRute Layer: {} (Converted from Plottsett: {})".format(self.layer, self.plottsett)
        if len(self.rute_entries) > 0:
            s = s + "\nRute Entries:"
            for i in self.rute_entries:
                s = s + i.__str__()
        if self.notes_text != "":
            s = s + "\nRute Notes: {}".format(self.notes_text)
        return s

    def print_rute(self):
        """Prints a description of the contents of the Rute
        """
        print()
        if self.rute_name != "":
            print("Rute Name: {}".format(self.rute_name))
        if self.rute_type != "":
            print("Rute Type: {}".format(self.rute_type))
        if self.rute_color != "":
            print("Line Color: {}".format(self.rute_color))
        if self.layer != "":
            print("Rute Layer: {} (Converted from Plottsett: {})".format(self.layer, self.plottsett))
        if len(self.rute_entries) > 0:
            print("Rute Entries:")
            print("**")
            for i in self.rute_entries:
                i.print_rute_entry()
                print("**")
        if self.notes_text != "":
            print("Rute Notes: {}".format(self.notes_text))

        print()
        return

    def get_rute_entries(self):
        """
        :return: the list of identified :class:`RuteEntry<olexparser.rute_entry.RuteEntry>` objects
        :rtype: list
        """
        return self.rute_entries.copy()

    def get_plottsett(self):
        """
        :return: the plottsett (Plot Layer) number, or -1 if there was an error
        :rtype: int
        """
        return self.plottsett

    def get_layer(self):
        """
        :return: The Layer the Rute uses within Olex.
        :rtype: str
        """
        return self.layer

    def get_rute_type(self):
        """
        :return: The Rute type
        :rtype: str
        """
        return self.rute_type

    def get_rute_color(self):
        """
        :return: The color (in Norwegian) of the Rute when it is displayed in Olex
        :rtype: str
        """
        return self.rute_color

    def get_rute_name(self):
        """
        :return: The Rute name
        :rtype: str
        """
        return self.rute_name

    def get_notes(self):
        """
        :return: Any notes present
        :rtype: str
        """
        return self.notes_text

    def get_warnings(self):
        """
        :return: a list of warnings generated by the Rute, and it's child objects
        :rtype: list
        """
        warn = self.warnings.copy()
        for entry in self.rute_entries:
            warn.extend(entry.get_warnings())
        return warn

    def to_gpx_route(self):
        """Returns the :class:`Rute<olexparser.rute.Rute>` as a :class:`gpxpy.gpx.GPXRoute` object.
        The :class:`gpxpy.gpx.GPXRoute` contains all the :class:`RuteEntries<olexparser.rute_entry.RuteEntry>`,
        as well as the Rute Type, Rute Name, any user notes identified, and a description.
        The description contains the layer, color, and plottsett data.
        :return: The :class:`Rute<olexparser.rute.Rute>` as a :class:`gpxpy.gpx.GPXRoute` object.
        :rtype: :class:`gpxpy.gpx.GPXRoute`
        """
        gpx_route = gpxpy.gpx.GPXRoute()
        gpx_route.type = self.rute_type
        gpx_route.name = self.rute_name
        gpx_route.comment = self.notes_text
        gpx_route.description = "Layer: {}, Plottsett: {}, Color: {}".format(self.layer, self.plottsett,
                                                                             self.rute_color)
        for entry in self.rute_entries:
            gpx_route.points.append(entry.to_gpx_routepoint())
        return gpx_route
