import struct
import gpxpy.gpx
import olexparser.convert as convert


class SegmentEntry:
    """
    A class representing a 16 byte entry from a :class:`SegmentFile<olexparser.segment_file.SegmentFile>`

    Each segment file consists of a number of 16 byte entries.
    Each entry contains a unix timestamp, latitude coordinate, longitude coordinate, and 4 bytes of unknown purpose.
    The unix timestamp is stored as a 4 byte integer. The latitude and longitude are stored as 4 byte floats.

    Any errors generated can be retrieved using :meth:`get_warnings()`

    :var self.timestamp_int: int representing a Unix timestamp. Default value is 0.
    :var self.lat_float: An "Olex" float representing a latitude coordinate. Default value is 0.
    :var self.long_float: An "Olex" float representing a longitude coordinate. Default value is 0.
    :var self.warnings: a list of warnings generated by the SegmentEntry Default value is 0.
    """

    def __init__(self, entry):
        """A constructor method for the SegmentEntry.

        :param entry: the 16 bytes which constitute an entry in the segment file
        :type entry: bytes
        """

        self.warnings = []
        self.lat_float = 0
        self.long_float = 0
        self.timestamp_int = 0
        if len(entry) != 16:
            warn = "Error, Segment Entry is not 16 byte length"
            self.warnings.append(warn)
        else:
            try:
                # convert the bytes into an int.
                self.timestamp_int = int.from_bytes(entry[:4], "little")
            except Exception as error:
                self.warnings.append(error)

            try:
                # convert the bytes into a float
                self.lat_float = struct.unpack('f', entry[4:8])[0]
            except Exception as error:
                self.warnings.append(error)

            try:
                # convert the bytes into a float
                self.long_float = struct.unpack('f', entry[8:12])[0]
            except Exception as error:
                self.warnings.append(error)

            try:
                # store the 4 unknown bytes as bytes
                self.unknown = entry[12:]
            except Exception as error:
                self.warnings.append(error)

    def __str__(self):
        """A descriptive String representation of the SegmentEntry.

        :return: A descriptive string with known values converted.
        :rtype: str
        """
        s = "\nUnix Timestamp: {} Timestamp converted UTC: {}".format(
            self.timestamp_int, convert.get_timestamp_str_from_int(self.timestamp_int))
        s = s + "\nLatitude float: {} Latitude coordinate: {}".format(
            self.lat_float, convert.get_lat_dmm(self.lat_float))
        s = s + "\nLongitude float: {} Longitude coordinate: {}".format(
            self.long_float, convert.get_long_dmm(self.long_float))
        s = s + "\n4 bytes of unknown purpose: {}".format(self.unknown)
        return s

    def print_segment_entry(self):
        """Prints the converted data from the 16 bytes"""
        print("Unix Timestamp: {} Timestamp converted UTC: {}".format(
            self.timestamp_int, convert.get_timestamp_str_from_int(self.timestamp_int)))
        print("Latitude float: {} Latitude coordinate: {}".format(
            self.lat_float, convert.get_lat_dmm(self.lat_float)))
        print("Longitude float: {} Longitude coordinate: {}".format(
            self.long_float, convert.get_long_dmm(self.long_float)))
        print("4 bytes of unknown purpose: {}".format(self.unknown))
        return

    def get_lat_float(self):
        """
        :return float: the 'Olex float' representing a latitude coordinate
        :rtype: float

        """
        return self.lat_float

    def get_long_float(self):
        """
        :return: the 'Olex float' representing a longitude coordinate
        :rtype: float

        """
        return self.long_float

    def get_unknown(self):
        """
        :return: The 4 unknown bytes at the end of an entry.
        :rtype: bytes

        """
        return self.unknown

    def get_timestamp_int(self):
        """
        :return: the integer representing a unix timestamp
        :rtype: int
        """
        return self.timestamp_int

    def get_warnings(self):
        """
        :return: A list of warnings generated by the SegmentEntry
        :rtype: list
        """
        return self.warnings.copy()

    def to_gpx_trackpoint(self):
        """
        :return: The :class:`SegmentEntry<olexparser.segment_entry.SegmentEntry>` data
            (latitude, longitude, and timestamp) as a :class:`gpxpy.gpx.GPXTrackPoint` object.
        :rtype: :class:`gpxpy.gpx.GPXTrackPoint`
        """
        seg_point = gpxpy.gpx.GPXTrackPoint(latitude=convert.get_lat_or_long_dd(self.lat_float),
                                            longitude=convert.get_lat_or_long_dd(self.long_float),
                                            time=convert.get_timestamp_str_from_int(self.timestamp_int))

        return seg_point
